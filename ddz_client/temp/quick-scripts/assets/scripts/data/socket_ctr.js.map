{"version":3,"sources":["socket_ctr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/scripts/data","sourcesContent":["import eventlister from \"../util/event_lister\"\nimport {defines} from \"../defines\"\n// import { Socket } from \"../lib/socket-io.js\"\n// import _socket from \"socket.io\"\nexport default class socketCtr {\n    constructor() {\n\n    }\n    respone_map = {}\n    call_index = 0\n\n\n    _socket = null;\n    eventObj: eventlister = new eventlister()\n    _sendmsg(cmdtype, req, callindex) {\n         this._socket.emit(\"notify\", { cmd: cmdtype, data: req, callindex: callindex })\n    }\n\n    _request(cmdtype, req, callback) {\n        console.log(\"send cmd:\" + cmdtype + \"  \" + JSON.stringify(req))\n        this.call_index++\n        this.respone_map[this.call_index] = callback\n        this._sendmsg(cmdtype, req, this.call_index)\n    }\n\n\n    initSocket() {\n        let opts = {\n            'reconnection': false,\n            'force new connection': true,\n            'transports': ['websocket', 'polling']\n        }\n         this._socket = window[\"io\"].connect(defines.serverUrl, opts);\n\n         this._socket.on(\"connection\", function () {\n            console.log(\"connect server success!!\")\n        })\n         this._socket.on(\"notify\", (res) => {\n            console.log(\"on notify cmd:\" + JSON.stringify(res))\n            if (this.respone_map.hasOwnProperty(res.callBackIndex)) {\n                let callback = this.respone_map[res.callBackIndex]\n                if (callback) {\n                    callback(res.result, res.data)\n                }\n            } else {\n                //if(res.callBackIndex!=0){\n                //console.log(\"not found call index\",res.callBackIndex)\n\n                //提交一个监听的事件给监听器\n                //  on notify cmd:{\"type\":\"player_joinroom_notify\",\"result\":0,\"data\":\n                //  {\"accountid\":\"2586422\",\"nick_name\":\"tiny110\",\"avatarUrl\":\n                //  \"avatar_3\",\"goldcount\":1000,\"seatindex\":2},\"callBackIndex\":null}\n                //没有找到回到函数，就给事件监听器提交一个事件\n                let type = res.type\n                this.eventObj.fire(type, res.data)\n                // }\n\n            }\n\n        })\n    }\n\n    request_wxLogin(req, callback) {\n        this._request(\"wxlogin\", req, callback)\n    }\n    request_guestLogin(req, callback) {\n        this._request(\"guestlogin\", req, callback)\n    }\n\n    request_creatroom(req, callback) {\n        this._request(\"createroom_req\", req, callback)\n    }\n\n    request_jion(req, callback) {\n        this._request(\"joinroom_req\", req, callback)\n    }\n\n    request_enter_room(req, callback) {\n        this._request(\"enterroom_req\", req, callback)\n    }\n\n    //发送不出牌信息\n    request_buchu_card(req, callback) {\n        this._request(\"chu_bu_card_req\", req, callback)\n    }\n    /*玩家出牌\n      需要判断: \n         出的牌是否符合规则\n         和上个出牌玩家比较，是否满足条件\n \n    */\n    request_chu_card(req, callback) {\n        this._request(\"chu_card_req\", req, callback)\n    }\n    //监听其他玩家进入房间消息\n    onPlayerJoinRoom(callback) {\n        this.eventObj.on(\"player_joinroom_notify\", callback)\n    }\n\n    onPlayerReady(callback) {\n        this.eventObj.on(\"player_ready_notify\", callback)\n    }\n\n    onGameStart(callback) {\n        if (callback) {\n            this.eventObj.on(\"gameStart_notify\", callback)\n        }\n    }\n\n    onChangeHouseManage(callback) {\n        if (callback) {\n            this.eventObj.on(\"changehousemanage_notify\", callback)\n        }\n    }\n    //发送ready消息\n    requestReady() {\n        this._sendmsg(\"player_ready_notify\", {}, null)\n    }\n\n    requestStart(callback) {\n        this._request(\"player_start_notify\", {}, callback)\n    }\n\n    //玩家通知服务器抢地主消息\n    requestRobState(state) {\n        this._sendmsg(\"player_rob_notify\", state, null)\n    }\n    //服务器下发牌通知\n    onPushCards(callback) {\n        if (callback) {\n            this.eventObj.on(\"pushcard_notify\", callback)\n        }\n    }\n\n    //监听服务器通知开始抢地主消息\n    onCanRobState(callback) {\n        if (callback) {\n            this.eventObj.on(\"canrob_notify\", callback)\n        }\n    }\n\n    //监听服务器:通知谁抢地主操作消息\n    onRobState(callback) {\n        if (callback) {\n            this.eventObj.on(\"canrob_state_notify\", callback)\n        }\n    }\n\n    //监听服务器:确定地主消息\n    onChangeMaster(callback) {\n        if (callback) {\n            this.eventObj.on(\"change_master_notify\", callback)\n        }\n    }\n\n    //监听服务器:显示底牌消息\n    onShowBottomCard(callback) {\n        if (callback) {\n            this.eventObj.on(\"change_showcard_notify\", callback)\n        }\n    }\n\n    //监听服务器:可以出牌消息\n    onCanChuCard(callback) {\n        if (callback) {\n            this.eventObj.on(\"can_chu_card_notify\", callback)\n        }\n    }\n\n    onRoomChangeState(callback) {\n        if (callback) {\n            this.eventObj.on(\"room_state_notify\", callback)\n        }\n    }\n\n    onOtherPlayerChuCard(callback) {\n        if (callback) {\n            this.eventObj.on(\"other_chucard_notify\", callback)\n        }\n    }\n}"]}